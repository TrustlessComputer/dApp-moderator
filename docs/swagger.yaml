basePath: /dapp-moderator/v1
definitions:
  request.CaptureSoulTokenReq:
    properties:
      contract_address:
        type: string
      token_id:
        type: string
    required:
    - contract_address
    - token_id
    type: object
  request.CompleteMultipartUploadRequest:
    properties:
      walletAddress:
        type: string
    type: object
  request.CompressFileSize:
    properties:
      file_content:
        type: string
    type: object
  request.ConfirmHistoriesReq:
    properties:
      data:
        items:
          properties:
            btc_hash:
              type: string
            status:
              type: string
            tx_hash:
              items:
                type: string
              type: array
          type: object
        type: array
    type: object
  request.CreateMultipartUploadRequest:
    properties:
      fileName:
        type: string
      group:
        type: string
    type: object
  request.CreateSignatureRequest:
    properties:
      wallet_address:
        type: string
    type: object
  request.UpdateBNSDefaultRequest:
    properties:
      token_id:
        type: string
    type: object
  request.UpdateTokenReq:
    properties:
      description:
        type: string
      name:
        type: string
      social:
        properties:
          discord:
            type: string
          instagram:
            type: string
          medium:
            type: string
          telegram:
            type: string
          twitter:
            type: string
          website:
            type: string
        type: object
      symbol:
        type: string
      thumbnail:
        type: string
    type: object
  request.UpsertRedisRequest:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  response.JsonResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.RespondErr'
      status:
        type: boolean
    type: object
  response.RedisResponse:
    properties:
      value:
        type: string
    type: object
  response.RespondErr:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  response.UploadResponse:
    properties:
      created_at:
        type: string
      file_name:
        type: string
      url:
        type: string
    type: object
  structure.CreateHistoryMessage:
    properties:
      btc_tx_hash:
        type: string
      currency:
        type: string
      dapp_type:
        type: string
      decimal:
        type: integer
      from_address:
        type: string
      time:
        type: string
      to_address:
        type: string
      tx_hash:
        type: string
      value:
        type: string
    type: object
  structure.GenerateMessage:
    properties:
      address:
        type: string
      walletType:
        type: string
    type: object
  structure.Social:
    properties:
      discord:
        type: string
      instagram:
        type: string
      medium:
        type: string
      telegram:
        type: string
      twitter:
        type: string
      website:
        type: string
    type: object
  structure.UpdateCollection:
    properties:
      cover:
        type: string
      description:
        type: string
      name:
        type: string
      social:
        $ref: '#/definitions/structure.Social'
      thumbnail:
        type: string
    type: object
  structure.UpdateUploadedFileTxHash:
    properties:
      token_id:
        type: string
      wallet_address:
        type: string
    type: object
  structure.VerifyMessage:
    properties:
      address:
        type: string
      signature:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server TC-DAPP server.
  title: tcDAPP APIs
  version: 1.0.0
paths:
  /admin/redis:
    delete:
      consumes:
      - application/json
      description: Delete Redis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete Redis
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get Redis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.RedisResponse'
              type: object
      summary: Get Redis
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Upsert Redis
      parameters:
      - description: Upsert redis key
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertRedisRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.RedisResponse'
              type: object
      summary: Upsert Redis
      tags:
      - Admin
  /admin/redis/{key}:
    delete:
      consumes:
      - application/json
      description: Delete Redis
      parameters:
      - description: Redis key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete Redis
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get Redis
      parameters:
      - description: Redis key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.RedisResponse'
              type: object
      summary: Get Redis
      tags:
      - Admin
  /auction/detail/{contractAddress}/{tokenID}:
    get:
      consumes:
      - application/json
      description: auctionDetail
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: token_id
        in: path
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: auctionDetail
      tags:
      - Auction
  /auction/list-bid:
    get:
      consumes:
      - application/json
      description: listBid
      parameters:
      - description: DB Auction ID
        in: query
        name: dbAuctionID
        type: string
      - description: Owner
        in: query
        name: owner
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: listBid
      tags:
      - Auction
  /auth/nonce:
    post:
      consumes:
      - application/json
      description: Generate a message for user's wallet
      parameters:
      - description: Generate message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.GenerateMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Generate a message
      tags:
      - Auth
  /auth/nonce/verify:
    post:
      consumes:
      - application/json
      description: Verified the generated message
      parameters:
      - description: Verify message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.VerifyMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Verified the generated message
      tags:
      - Auth
  /bfs-service/browse/{walletAddress}:
    get:
      consumes:
      - application/json
      description: Browse files of a wallet (uploader's wallet address)
      parameters:
      - description: walletAddress
        in: path
        name: walletAddress
        required: true
        type: string
      - description: path
        in: query
        name: path
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Browse files of a wallet
      tags:
      - BFS-service
  /bfs-service/content/{walletAddress}:
    get:
      consumes:
      - application/json
      description: Get file content of a wallet address (uploader's wallet address)
      parameters:
      - description: walletAddress
        in: path
        name: walletAddress
        required: true
        type: string
      - description: path
        in: query
        name: path
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get content file
      tags:
      - BFS-service
  /bfs-service/files/{walletAddress}:
    get:
      consumes:
      - application/json
      description: Get files of a wallet (uploader's wallet address)
      parameters:
      - description: walletAddress
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get files of a wallet
      tags:
      - BFS-service
  /bfs-service/info/{walletAddress}:
    get:
      consumes:
      - application/json
      description: Get file info of a wallet address (uploader's wallet address)
      parameters:
      - description: walletAddress
        in: path
        name: walletAddress
        required: true
        type: string
      - description: path
        in: query
        name: path
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get file info
      tags:
      - BFS-service
  /bns-service/default/{wallet_address}:
    get:
      consumes:
      - application/json
      description: bnsDefault
      parameters:
      - description: wallet_address
        in: path
        name: wallet_address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: bnsDefault
      tags:
      - BNS-service
    put:
      consumes:
      - application/json
      description: updateBnsDefault
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateBNSDefaultRequest'
      - description: user wallet address
        in: path
        name: wallet_address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - ApiKeyAuth: []
      summary: updateBnsDefault
      tags:
      - BNS-service
  /bns-service/names:
    get:
      consumes:
      - application/json
      description: Get bns names
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: token id
        in: query
        name: token_id
        type: string
      - description: resolver
        in: query
        name: resolver
        type: string
      - description: owner
        in: query
        name: owner
        type: string
      - description: pfp
        in: query
        name: pfp
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get bns names
      tags:
      - BNS-service
  /bns-service/names/{name}/available:
    get:
      consumes:
      - application/json
      description: Check bns name available for register
      parameters:
      - description: name
        in: path
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Check bns name available for register
      tags:
      - BNS-service
  /bns-service/names/{token_id}:
    get:
      consumes:
      - application/json
      description: detail of bns name
      parameters:
      - description: token_id
        in: path
        name: token_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get detail of bns name
      tags:
      - BNS-service
  /bns-service/names/owned/{wallet_address}:
    get:
      consumes:
      - application/json
      description: Get name of a wallet-address
      parameters:
      - description: wallet_address
        in: path
        name: wallet_address
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get name of a wallet-address
      tags:
      - BNS-service
  /dapp-info/create:
    get:
      consumes:
      - application/json
      description: update load dapp info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: post dapp info
      tags:
      - dapp-service
  /marketplace/collections:
    get:
      consumes:
      - application/json
      description: Get Collections
      parameters:
      - description: owner
        in: query
        name: owner
        type: string
      - description: contract
        in: query
        name: contract
        type: string
      - description: 'allow_empty, default: false'
        in: query
        name: allow_empty
        type: boolean
      - description: name
        in: query
        name: name
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: default deployed_at_block
        in: query
        name: sort_by
        type: string
      - description: default -1
        in: query
        name: sort
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Collections
      tags:
      - MarketPlace
  /marketplace/collections/{contract_address}:
    get:
      consumes:
      - application/json
      description: Get Collections
      parameters:
      - description: contract address
        in: path
        name: contract_address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Collections
      tags:
      - MarketPlace
  /marketplace/collections/{contract_address}/activities:
    get:
      consumes:
      - application/json
      description: Get collection's activities
      parameters:
      - description: contract_address
        in: path
        name: contract_address
        required: true
        type: string
      - description: '0: mint, 1: listing, 2: cancel listing, 3: token matched, default
          all'
        in: query
        name: types
        type: string
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get collection's activities
      tags:
      - MarketPlace
  /marketplace/collections/{contract_address}/attributes:
    get:
      consumes:
      - application/json
      description: Get Collection's attributes
      parameters:
      - description: trait_type
        in: query
        name: trait_type
        type: string
      - description: value
        in: query
        name: value
        type: string
      - description: contract address
        in: path
        name: contract_address
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Collection's attributes
      tags:
      - MarketPlace
  /marketplace/collections/{contract_address}/chart:
    get:
      consumes:
      - application/json
      description: Get collection's chart
      parameters:
      - description: contract_address
        in: path
        name: contract_address
        required: true
        type: string
      - description: 'date range: 7D, month - default 7D'
        in: query
        name: date_range
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get collection's chart
      tags:
      - MarketPlace
  /marketplace/collections/{contract_address}/nft-owners:
    get:
      consumes:
      - application/json
      description: Get marketplace Nft owners of a collection
      parameters:
      - description: contract_address
        in: path
        name: contract_address
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: 'sort by field: default volume'
        in: query
        name: sort_by
        type: string
      - description: 'sort default: -1 desc'
        in: query
        name: sort
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get marketplace Nft owners of a collection
      tags:
      - MarketPlace
  /marketplace/collections/{contract_address}/nfts:
    get:
      consumes:
      - application/json
      description: Get marketplace Nfts of a collection
      parameters:
      - description: min,max - separated by comma
        in: query
        name: rarity
        type: string
      - description: min,max - separated by comma
        in: query
        name: price
        type: string
      - description: 'key:value,key:value - separated by comma ex: Base colour:Red,Base
          colour:Orange'
        in: query
        name: attributes
        type: string
      - description: token id
        in: query
        name: token_id
        type: string
      - description: owner
        in: query
        name: owner
        type: string
      - description: contract_address
        in: path
        name: contract_address
        required: true
        type: string
      - description: 'true|false, default: all'
        in: query
        name: is_big_file
        type: boolean
      - description: 'true|false, default: all'
        in: query
        name: buyable
        type: boolean
      - description: limit
        in: query
        name: limit
        type: integer
      - description: 'sort by field: default volume'
        in: query
        name: sort_by
        type: string
      - description: 'sort default: -1 desc'
        in: query
        name: sort
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get marketplace Nfts of a collection
      tags:
      - MarketPlace
  /marketplace/collections/{contract_address}/nfts/{token_id}:
    get:
      consumes:
      - application/json
      description: Get marketplace Nft's detail
      parameters:
      - description: contract_address
        in: path
        name: contract_address
        required: true
        type: string
      - description: token_id
        in: path
        name: token_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get marketplace Nft's detail
      tags:
      - MarketPlace
  /marketplace/contract/{contract_address}/token/{token_id}/activities:
    get:
      consumes:
      - application/json
      description: Get token's activities
      parameters:
      - description: contract_address
        in: path
        name: contract_address
        required: true
        type: string
      - description: token_id
        in: path
        name: token_id
        required: true
        type: string
      - description: '0: open, 1: cancel, 2: done, default all'
        in: query
        name: status
        type: boolean
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get token's activities
      tags:
      - MarketPlace
  /marketplace/listing/{contract_address}/token/{token_id}:
    get:
      consumes:
      - application/json
      description: Get market place listing
      parameters:
      - description: contract address
        in: path
        name: contract_address
        required: true
        type: string
      - description: token_id
        in: path
        name: token_id
        required: true
        type: string
      - description: '0: open, 1: cancel, 2: done, default all'
        in: query
        name: status
        type: boolean
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get market place listing
      tags:
      - MarketPlace
  /marketplace/nfts:
    get:
      consumes:
      - application/json
      description: Get marketplace Nfts
      parameters:
      - description: contract_address
        in: query
        name: contract_address
        type: string
      - description: token_id
        in: query
        name: token_id
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get marketplace Nfts
      tags:
      - MarketPlace
  /marketplace/offers/{contract_address}/token/{token_id}:
    get:
      consumes:
      - application/json
      description: Get market place offers
      parameters:
      - description: contract address
        in: path
        name: contract_address
        required: true
        type: string
      - description: token_id
        in: path
        name: token_id
        required: true
        type: string
      - description: '0: open, 1: cancel, 2: done, default all'
        in: query
        name: status
        type: boolean
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get market place offers
      tags:
      - MarketPlace
  /marketplace/wallet/{wallet_address}/listing:
    get:
      consumes:
      - application/json
      description: listing of a profile
      parameters:
      - description: wallet_address
        in: path
        name: wallet_address
        required: true
        type: string
      - description: '0: open, 1: cancel, 2: done, default all'
        in: query
        name: status
        type: boolean
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get listing of a profile
      tags:
      - MarketPlace
  /marketplace/wallet/{wallet_address}/offer:
    get:
      consumes:
      - application/json
      description: Offers of a profile
      parameters:
      - description: wallet_address
        in: path
        name: wallet_address
        required: true
        type: string
      - description: '0: open, 1: cancel, 2: done, default all'
        in: query
        name: status
        type: boolean
      - description: sort by field
        in: query
        name: sort_by
        type: string
      - description: '1: ASC, -1: DESC'
        in: query
        name: sort
        type: integer
      - description: limit default 10
        in: query
        name: limit
        type: integer
      - description: page start with 1
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get offers of a profile
      tags:
      - MarketPlace
  /nft-explorer/collections:
    get:
      consumes:
      - application/json
      description: Get Collections
      parameters:
      - description: owner
        in: query
        name: owner
        type: string
      - description: contract
        in: query
        name: contract
        type: string
      - description: 'allow_empty, default: false'
        in: query
        name: allow_empty
        type: boolean
      - description: name
        in: query
        name: name
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: default deployed_at_block
        in: query
        name: sort_by
        type: string
      - description: default -1
        in: query
        name: sort
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Collections
      tags:
      - nft-explorer
  /nft-explorer/collections/{contractAddress}:
    get:
      consumes:
      - application/json
      description: Get Collections
      parameters:
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Collections
      tags:
      - nft-explorer
    put:
      consumes:
      - application/json
      description: Update Collection
      parameters:
      - description: UpdateCollection
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.UpdateCollection'
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Collection
      tags:
      - nft-explorer
  /nft-explorer/collections/{contractAddress}/nfts:
    get:
      consumes:
      - application/json
      description: Get nfts of a Collectionc
      parameters:
      - description: is_big_file
        in: query
        name: is_big_file
        type: boolean
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: name
        in: query
        name: name
        type: string
      - description: owner
        in: query
        name: owner
        type: string
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get nfts of a Collectionc
      tags:
      - nft-explorer
  /nft-explorer/collections/{contractAddress}/nfts/{tokenID}:
    get:
      consumes:
      - application/json
      description: Get nft detail of a Collection
      parameters:
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: tokenID
        in: path
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get nft detail of a Collection
      tags:
      - nft-explorer
  /nft-explorer/collections/{contractAddress}/nfts/{tokenID}/content:
    get:
      consumes:
      - application/json
      description: Get nft content of a Collection
      parameters:
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: tokenID
        in: path
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get nft content of a Collection
      tags:
      - nft-explorer
  /nft-explorer/nfts:
    get:
      consumes:
      - application/json
      description: Get Nfts
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Nfts
      tags:
      - nft-explorer
  /nft-explorer/owner-address/{ownerAddress}/nfts:
    get:
      consumes:
      - application/json
      description: Get tokens of a wallet address
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: ownerAddress
        in: path
        name: ownerAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get tokens of a wallet address
      tags:
      - nft-explorer
  /nft-explorer/refresh-nft/contracts/{contractAddress}/token/{tokenID}:
    get:
      consumes:
      - application/json
      description: refresh-nft
      parameters:
      - description: contractAddress
        in: path
        name: contractAddress
        required: true
        type: string
      - description: tokenID
        in: path
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: refresh-nft
      tags:
      - nft-explorer
  /profile/histories:
    post:
      consumes:
      - application/json
      description: Create profile's history
      parameters:
      - description: Generate message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.CreateHistoryMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - ApiKeyAuth: []
      summary: Create profile's history
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: confirm profile's history
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.ConfirmHistoriesReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - ApiKeyAuth: []
      summary: confirm profile's history
      tags:
      - Profile
  /profile/me:
    get:
      consumes:
      - application/json
      description: Current user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - ApiKeyAuth: []
      summary: Current user profile
      tags:
      - Profile
  /profile/wallet/{walletAddress}:
    get:
      consumes:
      - application/json
      description: User profile via wallet address
      parameters:
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: User profile via wallet address
      tags:
      - Profile
  /profile/wallet/{walletAddress}/allowed-list/existed:
    get:
      consumes:
      - application/json
      description: Check profile is received faucet
      parameters:
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Check profile is received faucet
      tags:
      - Profile
  /profile/wallet/{walletAddress}/collections:
    get:
      consumes:
      - application/json
      description: Current user collections (created collections and collection has
        the owned nft)
      parameters:
      - description: contract
        in: query
        name: contract
        type: string
      - description: name
        in: query
        name: name
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: default deployed_at_block
        in: query
        name: sort_by
        type: string
      - description: default -1
        in: query
        name: sort
        type: integer
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Current user collections
      tags:
      - Profile
  /profile/wallet/{walletAddress}/histories:
    get:
      consumes:
      - application/json
      description: Current user histories
      parameters:
      - description: tx_hash
        in: query
        name: tx_hash
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: default deployed_at_block
        in: query
        name: sort_by
        type: string
      - description: default -1
        in: query
        name: sort
        type: integer
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Current user histories
      tags:
      - Profile
  /profile/wallet/{walletAddress}/tokens/bought:
    get:
      consumes:
      - application/json
      description: Current user bouhght-tokens  (the tokens that the user has spent)
      parameters:
      - description: Wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: default token_id_int
        in: query
        name: sort_by
        type: string
      - description: default -1
        in: query
        name: sort
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Current user bouhght-tokens
      tags:
      - Profile
  /quicknode/address/{walletAddress}/balance:
    get:
      consumes:
      - application/json
      description: getaddress balance
      parameters:
      - description: BTC walletAddress
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JsonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.RedisResponse'
                  type: array
              type: object
      summary: qn_addressBalance RPC Method
      tags:
      - QuickNode
  /soul/capture:
    post:
      consumes:
      - application/json
      description: SoulCaptureImage
      parameters:
      - description: request data
        in: body
        name: requestdata
        required: true
        schema:
          $ref: '#/definitions/request.CaptureSoulTokenReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: SoulCaptureImage
      tags:
      - Soul
  /soul/nfts:
    get:
      consumes:
      - application/json
      description: Soul's Nfts
      parameters:
      - description: min,max - separated by comma
        in: query
        name: rarity
        type: string
      - description: min,max - separated by comma
        in: query
        name: price
        type: string
      - description: 'key:value,key:value - separated by comma ex: Base colour:Red,Base
          colour:Orange'
        in: query
        name: attributes
        type: string
      - description: token id
        in: query
        name: token_id
        type: string
      - description: 'true|false, default: all'
        in: query
        name: is_big_file
        type: boolean
      - description: 'true|false, default: all'
        in: query
        name: buyable
        type: boolean
      - description: limit
        in: query
        name: limit
        type: integer
      - description: 'sort by field: default volume'
        in: query
        name: sort_by
        type: string
      - description: 'sort default: -1 desc'
        in: query
        name: sort
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Soul's Nfts
      tags:
      - Soul
  /soul/nfts/{token_id}:
    get:
      consumes:
      - application/json
      description: Soul's Nft
      parameters:
      - description: token_id
        in: path
        name: token_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Soul's Nft
      tags:
      - Soul
  /soul/signature:
    post:
      consumes:
      - application/json
      description: Create signature
      parameters:
      - description: request data
        in: body
        name: requestdata
        required: true
        schema:
          $ref: '#/definitions/request.CreateSignatureRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Create signature
      tags:
      - Soul
  /token-explorer/token/{address}:
    get:
      consumes:
      - application/json
      description: Update token
      parameters:
      - description: contractAddress
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Update token
      tags:
      - token-explorer
    put:
      consumes:
      - application/json
      description: Get token detail
      parameters:
      - description: contractAddress
        in: path
        name: address
        required: true
        type: string
      - description: contractAddress
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTokenReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get token detail
      tags:
      - token-explorer
  /token-explorer/tokens:
    get:
      consumes:
      - application/json
      description: Get tokens
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: page
        in: query
        name: key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get tokens
      tags:
      - token-explorer
  /tools//compile-contract:
    get:
      consumes:
      - application/json
      description: Get bns names
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get bns names
      tags:
      - BNS-service
  /upload/file:
    get:
      consumes:
      - application/json
      description: Get uploaded Files
      parameters:
      - description: contract_address
        in: query
        name: contract_address
        type: string
      - description: token_id
        in: query
        name: token_id
        type: string
      - description: wallet_address
        in: query
        name: wallet_address
        type: string
      - description: tx_hash
        in: query
        name: tx_hash
        type: string
      - description: '0: new, 1: has tx_hash and not fully uploaded to blockchain,
          2: done. Statuses are separated by comma'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      summary: Get uploaded Files
      tags:
      - Uploader
    post:
      consumes:
      - application/json
      description: Upload File
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload File
      tags:
      - Uploader
  /upload/file-size:
    post:
      consumes:
      - application/json
      description: Upload and compress file
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/request.CompressFileSize'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload and compress file
      tags:
      - Uploader
  /upload/file/{file_id}/chunks:
    get:
      consumes:
      - application/json
      description: Get chunks of the uploaded file
      parameters:
      - description: fileID
        in: path
        name: file_id
        required: true
        type: string
      - description: tx_hash
        in: path
        name: tx_hash
        type: string
      - description: '0: new, 1: processing, 2: done - default: all'
        in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      security:
      - ApiKeyAuth: []
      summary: Get chunks of the uploaded file
      tags:
      - Uploader
  /upload/file/{file_id}/chunks/{chunk_id}:
    get:
      consumes:
      - application/json
      description: Get chunk by ID
      parameters:
      - description: fileID
        in: path
        name: file_id
        required: true
        type: string
      - description: chunk_id
        in: path
        name: chunk_id
        required: true
        type: string
      - description: '0: new, 1: processing, 2: done - default: all'
        in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      security:
      - ApiKeyAuth: []
      summary: Get chunk by ID
      tags:
      - Uploader
  /upload/file/{file_id}/chunks/{chunk_id}/tx_hash/{tx_hash}:
    put:
      consumes:
      - application/json
      description: update tx_hash for a chunk
      parameters:
      - description: file_id
        in: path
        name: file_id
        required: true
        type: string
      - description: chunk_id
        in: path
        name: chunk_id
        required: true
        type: string
      - description: tx_hash
        in: path
        name: tx_hash
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      security:
      - ApiKeyAuth: []
      summary: update tx_hash for a chunk
      tags:
      - Uploader
  /upload/file/{file_id}/tx_hash/{tx_hash}:
    put:
      consumes:
      - application/json
      description: update tx_hash for the uploaded file
      parameters:
      - description: file_id
        in: path
        name: file_id
        required: true
        type: string
      - description: tx_hash
        in: path
        name: tx_hash
        required: true
        type: string
      - description: request body
        in: body
        name: request_body
        required: true
        schema:
          $ref: '#/definitions/structure.UpdateUploadedFileTxHash'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      security:
      - ApiKeyAuth: []
      summary: update tx_hash for the uploaded file
      tags:
      - Uploader
  /upload/file/multipart:
    post:
      consumes:
      - application/json
      description: Create multipart upload.
      parameters:
      - description: Create multipart upload request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateMultipartUploadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Create multipart upload
      tags:
      - Uploader
  /upload/file/multipart-fake:
    post:
      consumes:
      - application/json
      description: Upload File multipart fake
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UploadResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload File multipart fake
      tags:
      - Uploader
  /upload/file/multipart/{uploadID}:
    post:
      consumes:
      - application/json
      description: Finish multipart upload
      parameters:
      - description: upload ID
        in: path
        name: uploadID
        required: true
        type: string
      - description: Request data
        in: body
        name: requestData
        required: true
        schema:
          $ref: '#/definitions/request.CompleteMultipartUploadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Finish multipart upload
      tags:
      - Uploader
    put:
      description: Upload multipart file
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: upload ID
        in: path
        name: uploadID
        required: true
        type: string
      - description: part number
        in: query
        name: partNumber
        type: string
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - Authorization: []
      summary: Upload multipart file
      tags:
      - Uploader
  /wallets/{walletAddress}:
    get:
      consumes:
      - application/json
      description: Get Wallet's info
      parameters:
      - description: walletAddress
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Wallet's info
      tags:
      - Wallet
  /wallets/{walletAddress}/txs:
    get:
      consumes:
      - application/json
      description: Get Wallet's txs
      parameters:
      - description: walletAddress
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Get Wallet's txs
      tags:
      - Wallet
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
